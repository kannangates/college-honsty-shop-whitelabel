
name: Auto Sync & Mirror to College Repos

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load college config
        id: set-matrix
        run: |
          config=$(cat .github/college-sync-config.yml)
          echo "matrix=$(echo "$config" | yq -o json | jq -c '.colleges | map(select(.enabled == true))')" >> $GITHUB_OUTPUT

  sync-and-mirror:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "Kannan"
          git config --global user.email "your-email@example.com"

      - name: Setup branch and merge
        id: merge
        run: |
          set -e
          
          # Fetch and checkout target branch
          git fetch origin ${{ matrix.branch }} || git checkout -b ${{ matrix.branch }}
          git checkout ${{ matrix.branch }}
          
          # Get last commit message before merge
          LAST_COMMIT=$(git log -1 --pretty=%B origin/main)
          echo "message=$LAST_COMMIT" >> $GITHUB_OUTPUT
          
          # Create a temporary commit to preserve branding files
          git add .
          git commit -m "Preserve branding before merge" || echo "Nothing to preserve"
          
          # Merge from main
          if git merge origin/main --no-commit --no-ff; then
            echo "Merge successful"
          else
            echo "Merge conflicts detected, resolving..."
            git status
          fi
          
          # Restore branding files from the college branch
          for file in ${{ join(matrix.brandingPaths, ' ') }}; do
            if [[ -f "$file" ]]; then
              echo "Restoring branding file: $file"
              git checkout HEAD~1 -- "$file" || echo "Could not restore $file"
            fi
          done
          
          # Commit the merge with preserved branding
          git add .
          git commit -m "üîÅ Auto-merged from main (branding preserved)" || echo "No changes to commit"

      - name: Cache Git operations
        uses: actions/cache@v3
        with:
          path: |
            .git
          key: ${{ runner.os }}-git-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-git-

      - name: Push to internal college branch
        run: |
          set -e
          git push origin ${{ matrix.branch }} --force-with-lease || git push origin ${{ matrix.branch }} --force

      - name: Setup GitHub App authentication
        id: auth
        run: |
          # Use GitHub App token if available, fallback to PAT
          if [[ -n "${{ secrets.GITHUB_APP_TOKEN }}" ]]; then
            echo "token=${{ secrets.GITHUB_APP_TOKEN }}" >> $GITHUB_OUTPUT
            echo "Using GitHub App token"
          else
            echo "token=${{ secrets.COLLEGE_REPO_TOKEN }}" >> $GITHUB_OUTPUT
            echo "Using PAT token"
          fi

      - name: Mirror to college GitHub repo
        id: mirror
        env:
          COLLEGE_REPO_URL: ${{ matrix.mirrorRepo }}
          AUTH_TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          set -e
          
          if [[ -z "$AUTH_TOKEN" ]]; then
            echo "‚ùå No authentication token available"
            exit 1
          fi
          
          CLEAN_REPO_URL="${COLLEGE_REPO_URL/https:\/\//}"
          echo "üîÅ Pushing to: $CLEAN_REPO_URL"
          
          # Add college remote with authentication
          git remote add college https://x-access-token:${AUTH_TOKEN}@${CLEAN_REPO_URL}
          
          # Push with retry logic
          for i in {1..3}; do
            if git push college ${{ matrix.branch }}:main --force-with-lease; then
              echo "‚úÖ Successfully pushed on attempt $i"
              break
            elif [[ $i -eq 3 ]]; then
              echo "‚ùå Failed to push after 3 attempts"
              git push college ${{ matrix.branch }}:main --force
            else
              echo "‚ö†Ô∏è Push attempt $i failed, retrying..."
              sleep 5
            fi
          done

      - name: Notify Success
        if: success()
        run: |
          curl -X POST "${{ matrix.webhookUrl }}" \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "‚úÖ *Sync Success* for *${{ matrix.name }}* ‚Üí `${{ matrix.branch }}`\n*Last Commit:* ${{ steps.merge.outputs.message }}\n*Timestamp:* $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")"
          }' || echo "Webhook notification failed"

      - name: Notify Failure
        if: failure()
        run: |
          curl -X POST "${{ matrix.webhookUrl }}" \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "‚ùå *Sync Failed* for *${{ matrix.name }}* ‚Üí `${{ matrix.branch }}`\n*Error:* Workflow failed at step ${{ job.status }}\n*Please check:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Timestamp:* $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")"
          }' || echo "Webhook notification failed"

      - name: Final Log
        run: |
          echo "‚úÖ Completed sync for ${{ matrix.name }}: ${{ matrix.branch }} ‚Üí ${{ matrix.mirrorRepo }}"
